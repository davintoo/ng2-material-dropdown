/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './ng2-dropdown-menu';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/query_list';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/change_detection/constants';
import * as import9 from '@angular/core/src/linker/component_factory';
import * as import10 from '../dropdown/ng2-dropdown';
import * as import11 from '@angular/core/src/linker/element_ref';
import * as import12 from './style.css.shim.ngstyle';
import * as import13 from '@angular/core/src/animation/animation_transition';
import * as import14 from '@angular/core/src/animation/animation_sequence_player';
import * as import15 from '@angular/core/src/animation/animation_styles';
import * as import16 from '@angular/core/src/animation/animation_style_util';
import * as import17 from '@angular/core/src/animation/animation_keyframe';
import * as import18 from '@angular/core/src/animation/animation_player';
export class Wrapper_Ng2DropdownMenu {
  /*private*/ _eventHandler:Function;
  context:import0.Ng2DropdownMenu;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  constructor(p0:any,p1:any,p2:any) {
    this._changed = false;
    this.context = new import0.Ng2DropdownMenu(p0,p1,p2);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  check_width(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.width = currValue;
      this._expr_0 = currValue;
    }
  }
  check_focusFirstElement(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.focusFirstElement = currValue;
      this._expr_1 = currValue;
    }
  }
  check_offset(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.offset = currValue;
      this._expr_2 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) {
      if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); }
      this.context.ngDoCheck();
    }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_Ng2DropdownMenu_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_Ng2DropdownMenu_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.Ng2DropdownMenu>;
  _Ng2DropdownMenu_0_3:Wrapper_Ng2DropdownMenu;
  _query_Ng2MenuItem_0_0:import6.QueryList<any>;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_Ng2DropdownMenu_Host0,renderType_Ng2DropdownMenu_Host,import7.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'ng2-dropdown-menu',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_Ng2DropdownMenu0(this.viewUtils,this,0,this._el_0);
    this._Ng2DropdownMenu_0_3 = new Wrapper_Ng2DropdownMenu(this.injectorGet(import10.Ng2Dropdown,this.parentIndex),new import11.ElementRef(this._el_0),this.renderer);
    this._query_Ng2MenuItem_0_0 = new import6.QueryList<any>();
    this.compView_0.create(this._Ng2DropdownMenu_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import9.ComponentRef_<any>(0,this,this._el_0,this._Ng2DropdownMenu_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.Ng2DropdownMenu) && (0 === requestNodeIndex))) { return this._Ng2DropdownMenu_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._Ng2DropdownMenu_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    if (!throwOnChange) { if (this._query_Ng2MenuItem_0_0.dirty) {
      this._query_Ng2MenuItem_0_0.reset(([] as any[]));
      this._Ng2DropdownMenu_0_3.context.items = this._query_Ng2MenuItem_0_0;
      this._query_Ng2MenuItem_0_0.notifyOnChanges();
    } }
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._Ng2DropdownMenu_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const Ng2DropdownMenuNgFactory:import9.ComponentFactory<import0.Ng2DropdownMenu> = new import9.ComponentFactory<import0.Ng2DropdownMenu>('ng2-dropdown-menu',View_Ng2DropdownMenu_Host0,import0.Ng2DropdownMenu);
const styles_Ng2DropdownMenu:any[] = [import12.styles];
var Ng2DropdownMenu_fade_states:any = {
  visible: {
    width: '100%',
    maxHeight: '350px',
    opacity: '1'
  }
  ,
  hidden: {
    width: '0px',
    maxHeight: '0px',
    opacity: '0'
  }
  ,
  '*': {}
}
;
function Ng2DropdownMenu_fade_factory(view:import2.AppView<any>,element:any,currentState:any,nextState:any):import13.AnimationTransition {
  var previousPlayers:any = view.animationContext.getAnimationPlayers(element,((nextState == 'void')? (null as any): 'fade'));
  var collectedStyles:any = {};
  var player:any = (null as any);
  var totalTime:any = 0;
  var defaultStateStyles:any = Ng2DropdownMenu_fade_states['*'];
  var startStateStyles:any = Ng2DropdownMenu_fade_states[currentState];
  if ((startStateStyles == (null as any))) { (startStateStyles = defaultStateStyles); }
  var endStateStyles:any = Ng2DropdownMenu_fade_states[nextState];
  if ((endStateStyles == (null as any))) { (endStateStyles = defaultStateStyles); }
  if (((player == (null as any)) && ((currentState == 'visible') && (nextState == 'hidden')))) {
      player = new import14.AnimationSequencePlayer([view.renderer.animate(element,new import15.AnimationStyles(import16.collectAndResolveStyles(collectedStyles,[startStateStyles])),import16.balanceAnimationKeyframes(collectedStyles,endStateStyles,[
        new import17.AnimationKeyframe(0,new import15.AnimationStyles(import16.collectAndResolveStyles(collectedStyles,[{}]))),
        new import17.AnimationKeyframe(1,new import15.AnimationStyles(import16.collectAndResolveStyles(collectedStyles,[{}])))
      ]
    ),100,0,'ease-out',previousPlayers)]);
    totalTime = 100;
  }
  if (((player == (null as any)) && ((currentState == 'hidden') && (nextState == 'visible')))) {
      player = new import14.AnimationSequencePlayer([view.renderer.animate(element,new import15.AnimationStyles(import16.collectAndResolveStyles(collectedStyles,[startStateStyles])),import16.balanceAnimationKeyframes(collectedStyles,endStateStyles,[
        new import17.AnimationKeyframe(0,new import15.AnimationStyles(import16.collectAndResolveStyles(collectedStyles,[{}]))),
        new import17.AnimationKeyframe(1,new import15.AnimationStyles(import16.collectAndResolveStyles(collectedStyles,[{}])))
      ]
    ),150,0,'cubic-bezier(0.55, 0, 0.55, 0.2)',previousPlayers)]);
    totalTime = 150;
  }
  if ((player == (null as any))) { (player = new import18.NoOpAnimationPlayer()); }
  player.onDone(():void => {
    player.destroy();
    import16.renderStyles(element,view.renderer,import16.prepareFinalAnimationStyles(startStateStyles,endStateStyles));
  });
  new import14.AnimationSequencePlayer(previousPlayers).destroy();
  import16.renderStyles(element,view.renderer,import16.clearStyles(startStateStyles));
  view.animationContext.queueAnimation(element,'fade',player);
  return new import13.AnimationTransition(player,currentState,nextState,totalTime);
}
var renderType_Ng2DropdownMenu:import4.RenderComponentType = import3.createRenderComponentType('',1,import5.ViewEncapsulation.Emulated,styles_Ng2DropdownMenu,{fade: Ng2DropdownMenu_fade_factory});
export class View_Ng2DropdownMenu0 extends import2.AppView<import0.Ng2DropdownMenu> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _text_3:any;
  _el_4:any;
  _text_5:any;
  _text_6:any;
  _text_7:any;
  _text_8:any;
  _text_9:any;
  _el_10:any;
  _text_11:any;
  /*private*/ _expr_12:any;
  /*private*/ _expr_13:any;
  /*private*/ _expr_14:any;
  /*private*/ _expr_15:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_Ng2DropdownMenu0,renderType_Ng2DropdownMenu,import7.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckAlways);
    this._expr_12 = import1.UNINITIALIZED;
    this._expr_13 = import1.UNINITIALIZED;
    this._expr_14 = import1.UNINITIALIZED;
    this._expr_15 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'tabindex','0'),(null as any));
    this._text_2 = this.renderer.createText(this._el_1,'\n\n    ',(null as any));
    this._text_3 = this.renderer.createText(this._el_1,'\n    ',(null as any));
    this._el_4 = import3.createRenderElement(this.renderer,this._el_1,'div',new import3.InlineArray2(2,'class','ng2-dropdown-menu'),(null as any));
    this._text_5 = this.renderer.createText(this._el_4,'\n        ',(null as any));
    this.projectNodes(this._el_4,0);
    this._text_6 = this.renderer.createText(this._el_4,'\n    ',(null as any));
    this._text_7 = this.renderer.createText(this._el_1,'\n',(null as any));
    this._text_8 = this.renderer.createText(parentRenderNode,'\n\n',(null as any));
    this._text_9 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._el_10 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','ng2-dropdown-backdrop'),(null as any));
    this._text_11 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_10,new import3.InlineArray2(2,'click',(null as any)),this.eventHandler(this.handleEvent_10));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._text_3,
      this._el_4,
      this._text_5,
      this._text_6,
      this._text_7,
      this._text_8,
      this._text_9,
      this._el_10,
      this._text_11
    ]
    ),[disposable_0]);
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_14:any = this.context.state.toString();
    if (import3.checkBinding(throwOnChange,this._expr_14,currVal_14)) {
      var animationTransition_fade:any = this.componentType.animations['fade'](this,this._el_4,((this._expr_14 == import1.UNINITIALIZED)? 'void': this._expr_14),((currVal_14 == import1.UNINITIALIZED)? 'void': currVal_14));
      this._expr_14 = currVal_14;
    }
    const currVal_12:any = import3.inlineInterpolate(1,'ng2-dropdown-menu-container ng2-dropdown-menu-container--',this.context.width,'');
    if (import3.checkBinding(throwOnChange,this._expr_12,currVal_12)) {
      this.renderer.setElementProperty(this._el_1,'className',currVal_12);
      this._expr_12 = currVal_12;
    }
    const currVal_13:any = this.context.state.isVisible;
    if (import3.checkBinding(throwOnChange,this._expr_13,currVal_13)) {
      this.renderer.setElementClass(this._el_1,'ng2-dropdown-menu-container--open',currVal_13);
      this._expr_13 = currVal_13;
    }
    const currVal_15:boolean = !this.context.state.isVisible;
    if (import3.checkBinding(throwOnChange,this._expr_15,currVal_15)) {
      this.renderer.setElementProperty(this._el_10,'hidden',currVal_15);
      this._expr_15 = currVal_15;
    }
  }
  detachInternal():void {
    var animationTransition_fade:any = this.componentType.animations['fade'](this,this._el_4,this._expr_14,'void');
  }
  handleEvent_10(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'click')) {
      const pd_sub_0:any = ((<any>this.context.hide()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}